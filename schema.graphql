# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Video {
  id: ID!
  sourceType: String
  youtubeUrl: String
  embedCode: String
  uploadedFile: FileFieldOutput
  title: String
  description: String
  thumbnail: ImageFieldOutput
  author: String
  videoId: String
  duration: String
  isNew: Boolean
  createdAt: DateTime
  isPublic: Boolean
  featured: Boolean
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  isRestricted: Boolean
  verificationMessage: String
  publishedAt: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input VideoWhereUniqueInput {
  id: ID
  videoId: String
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  sourceType: StringNullableFilter
  youtubeUrl: StringFilter
  embedCode: StringNullableFilter
  title: StringFilter
  description: StringNullableFilter
  author: StringFilter
  videoId: StringFilter
  duration: StringFilter
  isNew: BooleanFilter
  createdAt: DateTimeNullableFilter
  isPublic: BooleanFilter
  featured: BooleanFilter
  categories: CategoryManyRelationFilter
  isRestricted: BooleanFilter
  verificationMessage: StringFilter
  publishedAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  sourceType: OrderDirection
  youtubeUrl: OrderDirection
  embedCode: OrderDirection
  title: OrderDirection
  description: OrderDirection
  author: OrderDirection
  videoId: OrderDirection
  duration: OrderDirection
  isNew: OrderDirection
  createdAt: OrderDirection
  isPublic: OrderDirection
  featured: OrderDirection
  isRestricted: OrderDirection
  verificationMessage: OrderDirection
  publishedAt: OrderDirection
}

input VideoUpdateInput {
  sourceType: String
  youtubeUrl: String
  embedCode: String
  uploadedFile: FileFieldInput
  title: String
  description: String
  thumbnail: ImageFieldInput
  author: String
  videoId: String
  duration: String
  isNew: Boolean
  createdAt: DateTime
  isPublic: Boolean
  featured: Boolean
  categories: CategoryRelateToManyForUpdateInput
  isRestricted: Boolean
  verificationMessage: String
  publishedAt: DateTime
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageFieldInput {
  upload: Upload!
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  sourceType: String
  youtubeUrl: String
  embedCode: String
  uploadedFile: FileFieldInput
  title: String
  description: String
  thumbnail: ImageFieldInput
  author: String
  videoId: String
  duration: String
  isNew: Boolean
  createdAt: DateTime
  isPublic: Boolean
  featured: Boolean
  categories: CategoryRelateToManyForCreateInput
  isRestricted: Boolean
  verificationMessage: String
  publishedAt: DateTime
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type Ad {
  id: ID!
  title: String
  location: String
  image: ImageFieldOutput
  link: String
  isActive: Boolean
}

input AdWhereUniqueInput {
  id: ID
}

input AdWhereInput {
  AND: [AdWhereInput!]
  OR: [AdWhereInput!]
  NOT: [AdWhereInput!]
  id: IDFilter
  title: StringFilter
  location: StringNullableFilter
  link: StringFilter
  isActive: BooleanFilter
}

input AdOrderByInput {
  id: OrderDirection
  title: OrderDirection
  location: OrderDirection
  link: OrderDirection
  isActive: OrderDirection
}

input AdUpdateInput {
  title: String
  location: String
  image: ImageFieldInput
  link: String
  isActive: Boolean
}

input AdUpdateArgs {
  where: AdWhereUniqueInput!
  data: AdUpdateInput!
}

input AdCreateInput {
  title: String
  location: String
  image: ImageFieldInput
  link: String
  isActive: Boolean
}

type Category {
  id: ID!
  name: String
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  videosCount(where: VideoWhereInput! = {}): Int
  instagram(where: InstagramWhereInput! = {}, orderBy: [InstagramOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstagramWhereUniqueInput): [Instagram!]
  instagramCount(where: InstagramWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  videos: VideoManyRelationFilter
  instagram: InstagramManyRelationFilter
}

input VideoManyRelationFilter {
  every: VideoWhereInput
  some: VideoWhereInput
  none: VideoWhereInput
}

input InstagramManyRelationFilter {
  every: InstagramWhereInput
  some: InstagramWhereInput
  none: InstagramWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  videos: VideoRelateToManyForUpdateInput
  instagram: InstagramRelateToManyForUpdateInput
}

input VideoRelateToManyForUpdateInput {
  disconnect: [VideoWhereUniqueInput!]
  set: [VideoWhereUniqueInput!]
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

input InstagramRelateToManyForUpdateInput {
  disconnect: [InstagramWhereUniqueInput!]
  set: [InstagramWhereUniqueInput!]
  create: [InstagramCreateInput!]
  connect: [InstagramWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  videos: VideoRelateToManyForCreateInput
  instagram: InstagramRelateToManyForCreateInput
}

input VideoRelateToManyForCreateInput {
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

input InstagramRelateToManyForCreateInput {
  create: [InstagramCreateInput!]
  connect: [InstagramWhereUniqueInput!]
}

type Instagram {
  id: ID!
  description: String
  url: String
  embedCode: String
  isPublic: Boolean
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  author: String
  createdAt: DateTime
}

input InstagramWhereUniqueInput {
  id: ID
}

input InstagramWhereInput {
  AND: [InstagramWhereInput!]
  OR: [InstagramWhereInput!]
  NOT: [InstagramWhereInput!]
  id: IDFilter
  description: StringNullableFilter
  url: StringFilter
  embedCode: StringNullableFilter
  isPublic: BooleanFilter
  categories: CategoryManyRelationFilter
  author: StringFilter
  createdAt: DateTimeNullableFilter
}

input InstagramOrderByInput {
  id: OrderDirection
  description: OrderDirection
  url: OrderDirection
  embedCode: OrderDirection
  isPublic: OrderDirection
  author: OrderDirection
  createdAt: OrderDirection
}

input InstagramUpdateInput {
  description: String
  url: String
  embedCode: String
  isPublic: Boolean
  categories: CategoryRelateToManyForUpdateInput
  author: String
  createdAt: DateTime
}

input InstagramUpdateArgs {
  where: InstagramWhereUniqueInput!
  data: InstagramUpdateInput!
}

input InstagramCreateInput {
  description: String
  url: String
  embedCode: String
  isPublic: Boolean
  categories: CategoryRelateToManyForCreateInput
  author: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createAd(data: AdCreateInput!): Ad
  createAds(data: [AdCreateInput!]!): [Ad]
  updateAd(where: AdWhereUniqueInput!, data: AdUpdateInput!): Ad
  updateAds(data: [AdUpdateArgs!]!): [Ad]
  deleteAd(where: AdWhereUniqueInput!): Ad
  deleteAds(where: [AdWhereUniqueInput!]!): [Ad]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createInstagram(data: InstagramCreateInput!): Instagram
  createInstagrams(data: [InstagramCreateInput!]!): [Instagram]
  updateInstagram(where: InstagramWhereUniqueInput!, data: InstagramUpdateInput!): Instagram
  updateInstagrams(data: [InstagramUpdateArgs!]!): [Instagram]
  deleteInstagram(where: InstagramWhereUniqueInput!): Instagram
  deleteInstagrams(where: [InstagramWhereUniqueInput!]!): [Instagram]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  video(where: VideoWhereUniqueInput!): Video
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  videosCount(where: VideoWhereInput! = {}): Int
  ad(where: AdWhereUniqueInput!): Ad
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  adsCount(where: AdWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  instagram(where: InstagramWhereUniqueInput!): Instagram
  instagrams(where: InstagramWhereInput! = {}, orderBy: [InstagramOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstagramWhereUniqueInput): [Instagram!]
  instagramsCount(where: InstagramWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
